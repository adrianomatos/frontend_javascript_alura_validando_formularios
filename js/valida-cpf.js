export default function ehUmCPF(campo) {
  // M√©todo de strings em JS que substitui partes de uma string por outra string
  const cpf = campo.value.replace(/\.|-/g, "");
  if (
    validaNumerosRepetidos(cpf) ||
    validaPrimeiroDigito(cpf) ||
    validaSegundoDigito(cpf)
  ) {
    // console.log("CPF n√£o existe!");
    campo.setCustomValidity("Esse CPF n√£o √© v√°lido!");
  } //else {
  //   console.log("CPF v√°lido!");
  // }
}

function validaNumerosRepetidos(cpf) {
  const numerosRepetidos = [
    "00000000000",
    "11111111111",
    "22222222222",
    "33333333333",
    "44444444444",
    "55555555555",
    "66666666666",
    "77777777777",
    "88888888888",
    "99999999999",
  ];
  // includes verifica se est√° na lista informada (√© num repetido)
  return numerosRepetidos.includes(cpf);
}

function validaPrimeiroDigito(cpf) {
  let soma = 0;
  let multiplicador = 10;
  for (let tamanho = 0; tamanho < 9; tamanho++) {
    soma += cpf[tamanho] * multiplicador;
    multiplicador--;
  }
  soma = (soma * 10) % 11;
  if (soma == 10 || soma == 11) {
    soma = 0;
  }
  // console.log(soma);
  return soma != cpf[9];
}

function validaSegundoDigito(cpf) {
  let soma = 0;
  let multiplicador = 11;
  for (let tamanho = 0; tamanho < 10; tamanho++) {
    soma += cpf[tamanho] * multiplicador;
    multiplicador--;
  }
  soma = (soma * 10) % 11;
  if (soma == 10 || soma == 11) {
    soma = 0;
  }
  // console.log(soma);
  return soma != cpf[10];
}

/* FUNCIONAMENTO DO REPLACE: replace(/\.|-/g, "")
.replace(): Este √© um m√©todo de strings em JavaScript que substitui partes de uma string por outra string, com base em um padr√£o de correspond√™ncia (express√£o regular) ou uma string.

/\.|-/g: Aqui, /\.|-/g √© a express√£o regular usada como padr√£o de correspond√™ncia para identificar o que deve ser substitu√≠do na string campo.value.

/: Delimita o in√≠cio da express√£o regular.
\.: Este √© um padr√£o que corresponde a um ponto (.). O ponto √© um caractere especial em express√µes regulares, ent√£o √© preciso usar a barra invertida (\) para escap√°-lo e torn√°-lo literal.
|: O operador | dentro da express√£o regular funciona como uma altern√¢ncia, permitindo que a express√£o regular combine qualquer um dos padr√µes √† esquerda ou √† direita dele.
-: Simplesmente corresponde ao caractere h√≠fen.
/: Delimita o final da express√£o regular.
g: Esta √© uma flag da express√£o regular que significa "global". Ela indica que a substitui√ß√£o deve ser feita em todas as ocorr√™ncias do padr√£o na string, n√£o apenas na primeira.
"": Isso √© o que substitui os caracteres correspondidos pela express√£o regular. Neste caso, estamos substituindo todos os pontos (.) e hifens (-) por uma string vazia (""). Em outras palavras, estamos removendo esses caracteres da string campo.value.
*/

/* FUNCIONAMENTO DA VALIDA√á√ÉO DO CPF
*Quando estamos construindo um sistema que requer a cria√ß√£o de contas como o MoniBank, devemos validar os dados em que h√° essa possibilidade. Usando JavaScript nativamente, sem o uso de bibliotecas, iremos precisar fazer algumas valida√ß√µes manualmente, como a valida√ß√£o do CPF. Vamos atuar em cima de um CPF base que ser√°: 451.055.040-54. A f√≥rmula do c√°lculo dos √∫ltimos d√≠gitos verificadores de um CPF √© dividida em:

* Primeiro d√≠gito
Para descobrir o primeiro d√≠gito voc√™ precisar√° recolher os 9 primeiros d√≠gitos do CPF e multiplicar por n√∫meros de 10 a 2, sequencialmente.

Valor do CPF	4	5	1	0	5	5	0	4	0
Sequ√™ncia	10	9	8	7	6	5	4	3	2
Resultado	40	45	8	0	30	25	0	12	0
Depois, precisamos somar todos os valores gerados nas multiplica√ß√µes entre eles. Nesse caso, a soma resultou em 160. Em seguida, ser√° necess√°rio multiplicar essa soma por 10, que gerou o n√∫mero 1600. Por fim, devemos considerar o m√≥dulo da divis√£o desse n√∫mero. Nesse caso, 1600 dividido por 11 √© igual a 145, com resto 5.

Antes de decidirmos que esse √© o primeiro d√≠gito verificador, precisamos testar uma condi√ß√£o: Se o resultado for 10 ou 11, precisaremos zera-lo. Como n√£o √© o caso, podemos confirmar que 5 realmente √© o primeiro d√≠gito verificador do CPF base.

* Segundo d√≠gito
Para descobrir o segundo d√≠gito voc√™ precisar√° recolher os 10 primeiros d√≠gitos do CPF e multiplicar por n√∫meros de 11 a 2, sequencialmente.

Valor do CPF	4	5	1	0	5	5	0	4	0	5
Sequ√™ncia	11	10	9	8	7	6	5	4	3	2
Resultado	44	50	9	0	35	30	0	16	0	10
Em seguida, ser√° necess√°rio somar todos os valores resultados pela multiplica√ß√£o novamente, e essa soma resultou em 194. Depois, multiplicamos essa soma por 10, para encontrar o valor 1940. Ao final, chegamos na etapa de encontrar o m√≥dulo da divis√£o por 11. Nesse caso, 1940 dividido por 11 √© igual a 176, com resto 4.

Novamente, precisamos verificar para caso o resultado for 10 ou 11, ser√° necess√°rio zera-lo. Como novamente n√£o foi o caso, o n√∫mero 4 realmente √© o segundo d√≠gito verificador do CPF base.

Ent√£o, o c√°lculo completo do d√≠gito verificador do CPF base 451.055.040-54 √©:
Primeiro d√≠gito: 5
Segundo d√≠gito: 4
*/

/**Para te ajudar, pense em como voc√™ fez a altera√ß√£o para o CPF e a data de nascimento. Voc√™ utilizou o m√©todo setCustomValidity(). Lembre-se que o customError √© um tipo de erro que voc√™ define manualmente, e o setCustomValidity() √© o m√©todo que permite voc√™ definir a mensagem de erro personalizada.
  
-√â normal se sentir um pouco confuso! ü§î
-A mensagem de erro personalizada n√£o aparece diretamente no HTML, mas sim no Validity State do campo.
-O setCustomValidity() √© como se voc√™ estivesse "marcando" o campo com uma mensagem espec√≠fica, dizendo que ele est√° inv√°lido por um motivo particular.
-Essa mensagem √© usada internamente pelo navegador para indicar o erro, e pode ser acessada por meio do atributo validity.customError do campo.
-Ent√£o, mesmo que a mensagem n√£o apare√ßa diretamente na tela, ela est√° sendo utilizada para indicar o erro e pode ser acessada para fins de valida√ß√£o e feedback. üòâ
*/
